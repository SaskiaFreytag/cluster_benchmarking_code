hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset4.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset4.RData")
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "pbmc8k")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset5.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset5.RData")
gc()
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "frozen_pbmc_donor_a")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset6.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset6.RData")
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "frozen_pbmc_donor_b")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset7.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset7.RData")
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "frozen_pbmc_donor_c")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset8.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset8.RData")
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "frozen_pbmc_donor_c")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset8.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset8.RData")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol_TENx
rowData(sce)$id <- rowData(sce)$ENSEMBL_ID
colData(sce)$barcode <- colData(sce)$Barcode
## Load scater
library(scater)
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "pbmc6k")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol_TENx
rowData(sce)$id <- rowData(sce)$ENSEMBL_ID
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
colnames(sce) <- colData(sce)$barcode
rownames(counts(sce)) <- rowData(sce)$id
sce@rowRanges <- as(sce@rowRanges, "GRangesList")
## Save scater object for further analysis
save(sce, file="Sce_Dataset4.RData")
getwd()
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "pbmc8k")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol_TENx
rowData(sce)$id <- rowData(sce)$ENSEMBL_ID
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
colnames(sce) <- colData(sce)$barcode
rownames(counts(sce)) <- rowData(sce)$id
sce@rowRanges <- as(sce@rowRanges, "GRangesList")
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset5.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset5.RData")
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "frozen_pbmc_donor_a")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol_TENx
rowData(sce)$id <- rowData(sce)$ENSEMBL_ID
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
colnames(sce) <- colData(sce)$barcode
rownames(counts(sce)) <- rowData(sce)$id
sce@rowRanges <- as(sce@rowRanges, "GRangesList")
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset6.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset6.RData")
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "frozen_pbmc_donor_b")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol_TENx
rowData(sce)$id <- rowData(sce)$ENSEMBL_ID
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
colnames(sce) <- colData(sce)$barcode
rownames(counts(sce)) <- rowData(sce)$id
sce@rowRanges <- as(sce@rowRanges, "GRangesList")
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset7.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset7.RData")
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "frozen_pbmc_donor_c")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))rowData(sce)$symbol <- rowData(sce)$Symbol
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset8.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset8.RData")
library(rhdf5)
library(SingleCellExperiment)
library(here)
library(reticulate)
library(umapr)
library(tidyverse)
library(scater)
library(scran)
library(Seurat)
library(AnnotationHub)
library(limma)
library(ggrepel)
library(readxl)
local_path <- "analysis/combined/intermediates"
files_helpers <- list.files(here("utils"))
sapply(files_helpers, function(x) source(here("utils", x)))
h5file <- rhdf5::H5Fopen(here("data/combined", "singlecell_bbknn.h5ad"))
counts_sce <- h5file$X
rows_sce <- h5file$var[,1]
anno <- h5file$uns
col_sce <- h5file$obs
col_sce$celltype <- anno$celltype_categories[col_sce$celltype+1]
col_sce$sample <- anno$sample_categories[col_sce$sample+1]
col_sce$type <- anno$type_categories[col_sce$type+1]
col_sce$batch <- anno$batch_categories[col_sce$batch+1]
rhdf5::H5Fclose(h5file)
sce <- SingleCellExperiment(
assays = list(logcounts =  counts_sce),
colData = col_sce,
rowData = rows_sce
)
rm("anno", "col_sce", "rows_sce", "counts_sce")
gc()
edb <- AnnotationHub()[["AH57757"]]
anno <- as(genes(edb, columns = c("gene_id","symbol","gene_name", "gene_biotype", "seq_name", "entrezid")), "data.frame")
index_genes <- pmatch(rowData(sce)$X, anno$gene_id)
sce <- sce[!is.na(index_genes),]
index_genes <-index_genes [!is.na(index_genes)]
anno <- anno[index_genes,]
rowData(sce) <- cbind(rowData(sce), anno)
sce <- runPCA(sce, ncomponents = 20)
embedding <- umap(reducedDim(sce))
embedding <- data.frame(UMAP1 = embedding$UMAP1, UMAP2 = embedding$UMAP2,
celltype = colData(sce)$celltype,
sample = colData(sce)$sample,
type = colData(sce)$type,
louvain = colData(sce)$louvain)
embedding$type2 <- gsub("[[:digit:]]", "", embedding$type)
ggplot(embedding, aes(UMAP1, UMAP2, color = sample)) + geom_point(size=0.5)
#ggplot(embedding, aes(UMAP1, UMAP2, color = type2)) + geom_point(size=0.5)
#ggplot(embedding, aes(UMAP1, UMAP2, color = celltype)) + geom_point(size=0.5)
#ggplot(embedding, aes(UMAP1, UMAP2, color = as.factor(louvain))) + geom_point(size=0.5)
ggplot(embedding, aes(UMAP1, UMAP2, color = type2)) + geom_point(size=0.5)
#ggplot(embedding, aes(UMAP1, UMAP2, color = type2)) + geom_point(size=0.5)
#ggplot(embedding, aes(UMAP1, UMAP2, color = celltype)) + geom_point(size=0.5)
ggplot(embedding, aes(UMAP1, UMAP2, color = as.factor(louvain))) + geom_point(size=0.5)
embedding$guilty_cell <- embedding$type2
embedding$guilty_cell[embedding$guilty_cell=="dysmorphic"] <- "guilty"
ggplot(embedding, aes(UMAP1, UMAP2, color = guilty_cell)) + geom_point(size=0.5)
embedding <- umap(reducedDim(sce))
embedding <- data.frame(UMAP1 = embedding$UMAP1, UMAP2 = embedding$UMAP2,
celltype = colData(sce)$celltype,
sample = colData(sce)$sample,
type = colData(sce)$type,
louvain = colData(sce)$louvain)
embedding$type2 <- gsub("[[:digit:]]", "", embedding$type)
embedding$guilty_cell <- embedding$type2
embedding$guilty_cell[embedding$guilty_cell=="dysmorphic"] <- "guilty"
ggplot(embedding, aes(UMAP1, UMAP2, color = sample)) + geom_point(size=0.5)
ggplot(embedding, aes(UMAP1, UMAP2, color = type2)) + geom_point(size=0.5)
ggplot(embedding, aes(UMAP1, UMAP2, color = guilty_cell)) + geom_point(size=0.5)
#ggplot(embedding, aes(UMAP1, UMAP2, color = type2)) + geom_point(size=0.5)
#ggplot(embedding, aes(UMAP1, UMAP2, color = celltype)) + geom_point(size=0.5)
ggplot(embedding, aes(UMAP1, UMAP2, color = as.factor(louvain))) + geom_point(size=0.5)
rownames(sce)[1:5]
rowData(sce)
plotExpression(sce, features = "ENSG00000142583""  , colour_by = "guilty_cells")
plotExpression(sce, features = "ENSG00000142583"  , colour_by = "guilty_cells")
plotExpression(sce, features = "1762"  , colour_by = "guilty_cells")
plotExpression(sce, features = "1762" )
?plotExpression
plotExpression(sce, features = 1)
plotExpression(sce, features = 1, colour_by = "guilty_cell")
plotExpression(sce, features = 1, colour_by = "type2")
plotExpression(sce, features = 1, colour_by = "type")
plotExpression(sce, features = c(1,2,3), colour_by = "type")
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "pbmc6k")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol_TENx
rowData(sce)$id <- rowData(sce)$ENSEMBL_ID
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "pbmc6k")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
## Save scater object for further analysis
save(sce, file="Sce_Dataset4_new.RData")
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "pbmc4k")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol_TENx
rowData(sce)$id <- rowData(sce)$ENSEMBL_ID
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
colnames(sce) <- colData(sce)$barcode
rownames(counts(sce)) <- rowData(sce)$id
sce@rowRanges <- as(sce@rowRanges, "GRangesList")
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset3a.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset3a.RData")
## Load data via TENxPBMCData package
library(TENxPBMCData)
sce <- TENxPBMCData(dataset = "pbmc3k")
## Load scater
library(scater)
rowData(sce)$Mito <- grepl("^MT", rowData(sce)$Symbol)
rowData(sce)$ProteinRibo <- grepl("^RP", rowData(sce)$Symbol)
## Calculate quality statistics
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
hist(colData(sce)$pct_counts_mt)
hist(colData(sce)$pct_counts_rbp)
## Delete bad cells
libsize.drop <- isOutlier(sce$total_counts, nmads = 3, type = "lower", log = TRUE)
feature.drop <- isOutlier(sce$total_features, nmads = 3, type = "lower", log = TRUE)
mito.drop <- isOutlier(sce$pct_counts_mt, nmads = 3, type = "higher", log = TRUE)
sce <- sce[,!(libsize.drop | feature.drop |mito.drop)]
sce <- calculateQCMetrics(sce, feature_controls = list(mt=rowData(sce)$Mito , rbp=rowData(sce)$ProteinRibo))
rowData(sce)$symbol <- rowData(sce)$Symbol_TENx
rowData(sce)$id <- rowData(sce)$ENSEMBL_ID
colData(sce)$barcode <- colData(sce)$Barcode
counts(sce) <- as.matrix(counts(sce))
colnames(sce) <- colData(sce)$barcode
rownames(counts(sce)) <- rowData(sce)$id
sce@rowRanges <- as(sce@rowRanges, "GRangesList")
## Save list of barcodes for reanalysis
barcode<-colData(sce)$Barcode
barcode<-as.matrix(barcode)
colnames(barcode)<-"Barcode"
write.csv(barcode, file="cleaned_barcodes_dataset1a.csv", row.names = F, quote=F)
## Save scater object for further analysis
save(sce, file="Sce_Dataset1a.RData")
load("~/GitHub/cluster_benchmarking_code/silverstandard/labelling/Sce_Dataset3a.RData")
setwd("~/GitHub/cluster_benchmarking_code/silverstandard/labelling")
